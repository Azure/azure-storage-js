import { HttpOperationResponse } from "ms-rest-js";
import { TransferProgressEvent } from "ms-rest-js/typings/lib/webResource";

import { BlobHTTPHeaders } from "./generated/models";
import { IBlobAccessConditions } from "./models";

/**
 * Option interface for UploadBufferToBlockBlob, UploadFileToBlockBlob and UploadSeekableStreamToBlockBlob.
 *
 * @export
 * @interface IUploadToBlockBlobOptions
 */
export interface IUploadToBlockBlobOptions {
  /**
   * Destination block blob size.
   *
   * @type {number}
   * @memberof IUploadToBlockBlobOptions
   */
  blockSize: number;

  /**
   * Progress updater.
   *
   * @memberof IUploadToBlockBlobOptions
   */
  progress?: (progress: TransferProgressEvent) => void;

  /**
   * Blob HTTP Headers.
   *
   * @type {IBlobHTTPHeaders}
   * @memberof IUploadToBlockBlobOptions
   */
  blobHTTPHeaders?: BlobHTTPHeaders;

  /**
   * Metadata of block blob.
   *
   * @type {{ [propertyName: string]: string }}
   * @memberof IUploadToBlockBlobOptions
   */
  metadata?: { [propertyName: string]: string };

  /**
   * Access conditions headers.
   *
   * @type {IBlobAccessConditions}
   * @memberof IUploadToBlockBlobOptions
   */
  accessConditions?: IBlobAccessConditions;

  /**
   * Concurrency of parallel uploading. Must be >= 0.
   *
   * @type {number}
   * @memberof IUploadToBlockBlobOptions
   */
  parallelism: number;
}

/**
 * ICommonResponse returns the common response to all blob REST API responses.
 *
 * @export
 * @interface ICommonResponse
 * @extends {HttpOperationResponse<any, ICommonHeaders>}
 */
export interface ICommonResponse
  extends HttpOperationResponse<any, ICommonResponseHeaders> {}

/**
 * ICommonResponseHeaders returns the headers common to all blob REST API responses.
 *
 * @export
 * @interface ICommonResponseHeaders
 */
export interface ICommonResponseHeaders {
  /**
   * @member {string} [eTag] The ETag contains a value that you can use to
   * perform operations conditionally. If the request version is 2011-08-18 or
   * newer, the ETag value will be in quotes.
   */
  eTag?: string;
  /**
   * @member {Date} [lastModified] Returns the date and time the container was
   * last modified. Any operation that modifies the blob, including an update
   * of the blob's metadata or properties, changes the last-modified time of
   * the blob.
   */
  lastModified?: Date;
  /**
   * @member {string} [requestId] This header uniquely identifies the request
   * that was made and can be used for troubleshooting the request.
   */
  requestId?: string;
  /**
   * @member {string} [version] Indicates the version of the Blob service used
   * to execute the request. This header is returned for requests made against
   * version 2009-09-19 and above.
   */
  version?: string;
  /**
   * @member {Date} [date] UTC date/time value generated by the service that
   * indicates the time at which the response was initiated
   */
  date?: Date;
}

/**
 * Option interface for DownloadAzureFileToBuffer.
 *
 * @export
 * @interface IDownloadFromBlobOptions
 */
export interface IDownloadFromBlobOptions {
  /**
   * blockSize is the data every request trying to download.
   * Must be >= 0, if set to 0, blockSize will automatically calculated according
   * to the blob size.
   *
   * @type {number}
   * @memberof IDownloadFromBlobOptions
   */
  blockSize: number;

  /**
   * Progress updater.
   *
   * @memberof IDownloadFromBlobOptions
   */
  progress?: (progress: TransferProgressEvent) => void;

  /**
   * Access conditions headers.
   *
   * @type {IBlobAccessConditions}
   * @memberof IDownloadFromBlobOptions
   */
  accessConditions?: IBlobAccessConditions;

  /**
   * Concurrency of parallel download.
   *
   * @type {number}
   * @memberof IDownloadFromBlobOptions
   */
  parallelism: number;

  /**
   * TODO:
   *
   * @type {*}
   * @memberof IDownloadFromBlobOptions
   */
  retryReaderOptionsPerBlock: any;
}
